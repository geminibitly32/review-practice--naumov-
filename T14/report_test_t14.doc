Задача 3: Простая проверка лицензии
 Пример кода с пояснением каждой строки

1. import os
   # Подключается модуль os для работы с файловой системой

2.
   # Пустая строка — разделение между функциями

3. def check_license():
   # Создаётся функция check_license(), которая будет отвечать за проверку файла лицензии

4.     if not os.path.exists("license.key"):
   # Проверяется, есть ли в текущей директории файл license.key

5.         print("Файл лицензии не найден!")
   # Если файла нет — выводится сообщение об этом

6.         return False
   # Функция возвращает False, так как лицензия отсутствует

7.
   # Пустая строка — логическое разделение частей кода

8.     with open("license.key") as f:
   # Открывается файл license.key для чтения с помощью контекстного менеджера

9.         key = f.read().strip()
   # Читается содержимое файла и убираются лишние пробелы и символы новой строки

10.        return key == "ABCD-1234-EFGH"
    # Сравнивается ключ из файла с ожидаемым значением и возвращается результат (True или False)	
11.
    # Пустая строка — разделение между функциями

12. def main():
    # Основная функция программы

13.     if not check_license():
    # Вызывается функция проверки лицензии. Если она вернёт False...

14.         print("Программа заблокирована!")
    # ...выводится соответствующее сообщение

15.         return
    # Завершается выполнение программы

16.
    # Пустая строка — логическое разделение

17.     print("Программа запущена!")
    # Если всё в порядке — программа начинает работу

18.     # Основной код
    # Здесь должен быть основной функционал программы

19.
    # Пустая строка — разделение



20. if __name__ == "__main__":
    # Проверяется, запускается ли скрипт напрямую, а не импортируется как библиотека

21.     main()
    # Запускается основная функция программы
Результаты тестирования программы
1. Файл license.key отсутствует
Программа проверяет наличие файла лицензии и, не найдя его, выводит:
Файл лицензии не найден!
Программа заблокирована!
После этого выполнение программы останавливается, и основной функционал не запускается.
2. Файл license.key существует и содержит правильный ключ "ABCD-1234-EFGH"
Программа считывает ключ из файла, сравнивает его с ожидаемым значением и, если совпадает, выводит:
Программа запущена!
После этого начинает выполняться основной код программы (если он реализован).
3. Файл license.key существует, но содержит неверный ключ
Программа читает ключ, но так как он не совпадает с ожидаемым, выводится следующее сообщение:
Программа заблокирована!
Основной код также не запускается.
Задача 4: Ответы на вопросы
1. Каковы основные цели защиты программного обеспечения от исследования?
Цель защиты — предотвратить несанкционированный доступ к коду, данные и алгоритмы. Это помогает:
    • Сохранить коммерческую тайну.
    • Защитить интеллектуальную собственность.
    • Избежать взлома и создания подделок.
    • Обеспечить контроль над использованием продукта.
2. Почему защита программного обеспечения важна для бизнеса?
Без защиты ПО может стать уязвимым для пиратства, что приводит к:
    • Потере доходов.
    • Повреждению репутации.
    • Распространению поддельных версий.
    • Утечкам данных пользователей.
    • Юридическим последствиям.
3. Какие риски могут возникнуть при отсутствии защиты программ?
    • Кража кода и повторное использование.
    • Неограниченное распространение программы.
    • Вскрытие секретных данных или API-ключей.
    • Модификация программы злоумышленниками.
    • Возможность запуска вредоносного кода внутри приложения.
4. Что такое реверс-инжиниринг и как он может угрожать безопасности программ?
Это процесс анализа готового приложения с целью понять его внутреннее устройство. Он позволяет:
    • Получить доступ к алгоритмам.
    • Найти уязвимости.
    • Обойти защиту и лицензионные проверки.
    • Создать клон или изменить поведение программы.
5. Какие основные методы реверс-инжиниринга существуют?
    • Дизассемблирование (преобразование машинного кода в ассемблер).
    • Декомпиляция (восстановление высокоуровневого кода).
    • Анализ дампов памяти.
    • Отладка и трассировка.
    • Использование специализированных инструментов (IDA Pro, Ghidra, x64dbg).
6. Какие уязвимости могут быть выявлены в недостаточно защищенных программах?
    • Хардкод паролей и ключей.
    • Открытые пути активации.
    • Лёгкий обход лицензионной проверки.
    • Утечки памяти и переполнения буферов.
    • Отсутствие шифрования конфиденциальных данных.
7. Какие методы защиты программного обеспечения наиболее распространены?
    • Обфускация кода.
    • Шифрование части кода или данных.
    • Лицензирование и активация.
    • Антитампер механизмы.
    • Проверка целостности кода.
    • Использование anti-debug и anti-dump техник.
8. Как работает шифрование данных, и какие есть его основные виды?
Шифрование — это преобразование информации в нечитаемый формат, который можно расшифровать только с ключом.
Типы:
    • Симметричное (AES, DES): один ключ для шифрования и дешифрования.
    • Асимметричное (RSA, ECC): открытый и закрытый ключ.
    • Хэширование (SHA-256, SHA-3): одностороннее преобразование для проверки целостности.
9. Что такое обфускация кода и как она помогает защитить программы?
Обфускация — это изменение структуры кода таким образом, чтобы он оставался рабочим, но стал сложным для понимания человеком. Это помогает:
    • Затруднить анализ.
    • Скрыть логику работы.
    • Предотвратить копирование кода.
10. Какие инструменты можно использовать для обфускации кода?
    • Для Python: PyArmor, Cython + компиляция.
    • Для Java: ProGuard, Allatori.
    • Для .NET: Dotfuscator, ConfuserEx.
    • Для JavaScript: JavaScript Obfuscator.
    • Для C++: UPX, VMProtect.
11. Как можно использовать лицензирование для защиты программного обеспечения?
Лицензирование используется для ограничения доступа к программе до её активации. Оно позволяет:
    • Привязывать программу к конкретному устройству или пользователю.
    • Устанавливать срок действия.
    • Блокировать запуск без разрешения.
12. Какие типы лицензий наиболее эффективны для защиты программ?
    • Персональная лицензия
    • Подписка
    • Hardware-ключи (Dongle)
    • Онлайн-активация
    • Floating License (сетевая)
13. Как тестировать защитные механизмы программы на уязвимости?
    • Использовать отладчики и дизассемблеры.
    • Проверять обходы активации.
    • Тестировать антиотладочные механизмы.
    • Применять fuzzing.
    • Проверять поведение в разных средах.
14. В чём важность регулярных аудитов безопасности программ?
    • Обнаружение новых уязвимостей.
    • Обновление защитных механизмов.
    • Соответствие стандартам безопасности.
    • Предотвращение финансовых потерь.
15. Как автоматизированное тестирование может помочь в оценке защиты программ?
    • Автоматизация поиска уязвимостей.
    • Интеграция в CI/CD.
    • Тестирование разных сценариев взлома.
    • Быстрая проверка обновлений.
16. Примеры успешных практик защиты программного обеспечения
    • Adobe Creative Cloud : облачная авторизация.
    • Microsoft Office 365 : онлайн-активация.
    • Steam DRM : защита игровых продуктов.
    • Themida / VMProtect : мощные обфускаторы для Windows.
17. Как адаптировать методы защиты в зависимости от типа программного обеспечения?
    • Мобильные приложения : защита APK/IPA, проверка root/jailbreak.
    • Десктопные приложения : обфускация, антиотладка.
    • Web-приложения : WAF, токены, шифрование.
    • IoT-устройства : аппаратная защита, безопасная загрузка.
      
18. Какие известные случаи взлома демонстрируют недостатки защиты?
    • Пиратские версии Windows с обходом активации.
    • Jailbreak iOS .
    • Взлом PlayStation 3 Secure Boot .
    • Удаление DRM из Netflix APK .
19. Как современные технологии, такие как машинное обучение, могут улучшить защиту программ?
    • Обнаружение аномального поведения.
    • Генерация уникальных обфускаций.
    • Автоматический поиск уязвимостей.
    • Прогнозирование возможных атак.
20. Какие существуют юридические аспекты защиты программного обеспечения?
    • Авторское право.
    • Лицензионные соглашения (EULA).
    • Патенты.
    • GDPR и другие законы о защите данных.
21. Какие новые тренды в защите программного обеспечения наблюдаются сегодня?
    • Использование AI для анализа уязвимостей.
    • Обфускация на уровне исполняемых файлов.
    • Аппаратная защита (TPM, Secure Enclave).
    • Защита ML-моделей от реверса.
    • Облачные проверки и динамическая защита.
22. Как развитие технологий влияет на методы защиты программ от реверс-инжиниринга?
С развитием технологий появляются более сложные методы защиты:
    • Обфускация через виртуальные машины.
    • Шифрование частей кода во время исполнения.
    • Использование хардварных средств защиты (например, Intel SGX).
23. Какие уязвимости могут появиться с развитием IoT и AI в программном обеспечении?
    • Нехватка ресурсов для полноценной защиты.
    • Уязвимости в протоколах связи.
    • Неправильная обработка данных AI.
    • Сложность обновления прошивок на устройствах IoT.




